services:

  traefik:
    image: traefik:v3
    restart: always
    networks:
      - traefik
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.email=REPLACE_WITH_ACME_EMAIL"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--accesslog"
    ports:
      - 80:80
      - 443:443
    expose:
      - 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./storage/traefik/config/acme.json:/letsencrypt/acme.json
    labels:
      - "traefik.enable=true"

  nginx:
    image: nginx:latest
    restart: always
    networks:
      - traefik
    volumes:
      - ./storage/nginx/site:/usr/share/nginx/html
      - ./storage/nginx/matrix.conf:/etc/nginx/conf.d/matrix.conf
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.nginx.rule=(Host(`REPLACE_WITH_HOSTNAME`) && PathPrefix(`/.well-known`)) || Host(`REPLACE_WITH_SITE_HOST`)"
      - "traefik.http.routers.nginx.priority=1" #long rule, so we knock its priority down to allow synapse rule to take over
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls.certresolver=le"
      ## redirect base hostname to your site. change to REPLACE_WITH_ELEMENT_HOST if you want to redirect to Element instead.
      - "traefik.http.middlewares.to-site.redirectregex.regex=^https://REPLACE_WITH_HOSTNAME/$$"
      - "traefik.http.middlewares.to-site.redirectregex.replacement=https://REPLACE_WITH_REDIRECT_HOST/"
      - "traefik.http.routers.site.middlewares=to-site"
      - "traefik.http.routers.site.rule=Host(`REPLACE_WITH_HOSTNAME`)"
      - "traefik.http.routers.site.tls.certresolver=le"

  synapse:
    image: ghcr.io/element-hq/synapse:REPLACE_WITH_SYNAPSE_VERSION_TAG
    restart: always
    depends_on:
      - postgresql
    networks:
      - traefik
      - postgres
    volumes:
      - ./storage/synapse/data:/data
    environment:
      - UID=REPLACE_WITH_UID
      - GID=REPLACE_WITH_UID
    expose:
      - 8008
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.synapse.entrypoints=websecure"
      - "traefik.http.routers.synapse.tls.certresolver=le"
      - "traefik.http.routers.synapse.rule=Host(`REPLACE_WITH_MATRIX_HOST`)"
      - "traefik.http.routers.synapse.priority=100"

  element:
    image: ghcr.io/element-hq/element-web:REPLACE_WITH_ELEMENT_VERSION_TAG
    restart: always
    networks:
      - traefik
    volumes:
      - ./storage/element/data/config.json:/app/config.json
    expose:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.element.entrypoints=websecure"
      - "traefik.http.routers.element.tls.certresolver=le"
      - "traefik.http.routers.element.rule=Host(`REPLACE_WITH_ELEMENT_HOST`)"

  postgresql:
    image: postgres:REPLACE_WITH_POSTGRES_VERSION_TAG
    restart: always
    networks:
      postgres:
        aliases: 
          - database
    environment:
      - POSTGRES_PASSWORD=REPLACE_WITH_POSTGRES_ROOT_PW
    volumes:
      - ./storage/postgresql/data:/var/lib/postgresql/data
      - ./storage/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    expose:
      - 5432
  
# maubot:
#   image: dock.mau.dev/maubot/maubot:latest
#   restart: always
#   volumes:
#     - ./storage/maubot/data:/data:z
#   networks:
#     - traefik
#   expose:
#     - 29316
#   labels:
#     - "traefik.enable=true"
#     - "traefik.docker.network=traefik"
#     - "traefik.http.routers.maubot.entrypoints=websecure"
#     - "traefik.http.routers.maubot.tls.certresolver=le"
#     - "traefik.http.routers.maubot.rule=Host(`REPLACE_WITH_MAUBOT_HOST`)"

networks:
  postgres:
  traefik:
    # explicitly name it so it works in traefik.docker.network labels
    name: traefik
